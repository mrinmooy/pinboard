void swap(int &a, int &b) {
	a = a + b;
	b = a - b;
	a = a - b;
}


class mrinHeap {
private:
	vector<int> heapp = {0};
	int sz = 0;
public:
	void insert(int val) {
		heapp.push_back(val);
		sz += 1;
		int i = sz;
		while((i/2)>0) {
			if(heapp[i]<heapp[i/2]) {
				swap(heapp[i],heapp[i/2]);
			} else {
				break;
			}
			i /= 2;
		}
	}
	int top() {
		return heapp[sz==0?0:1];
	}
	void top_pop() {
		if(sz==0) return;
		heapp[1] = heapp[sz];
		heapp.pop_back();
		sz -= 1;
		int i = 1;
		while((i*2)<=sz) {
			if(heapp[2*i]<heapp[i]) {
				swap(heapp[2*i],heapp[i]);
				if(2*i+1<=sz and heapp[2*i+1]<heapp[i]) {
					swap(heapp[2*i],heapp[i]);
					swap(heapp[2*i+1],heapp[i]);
					i = i*2 + 1;
				} else {
					i = i*2;
				}
			} else if(2*i + 1<=sz and heapp[2*i + 1]<heapp[i]) {
				swap(heapp[2*i+1],heapp[i]);
				i = i*2 + 1;
			} else {
				break;
			}
		}
	}
	int size() {
		return sz;
	}
};

vector<int> heapsortASC(vector<int> &v, int n) {
	vector<int> res = {0};
	mrinHeap mnH;
	for(int i=1;i<=n;i++) {
		mnH.insert(v[i]);
	}
	while(mnH.size()>0) {
		res.push_back(mnH.top());
		mnH.top_pop();
	}
	return res;
}