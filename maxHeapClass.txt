void swap(int &a, int &b) {
	a = a + b;
	b = a - b;
	a = a - b;
}

class mraxHeap {
private:
	vector<int> heapp = {0};
	int sz = 0;
public:
	void insert(int val) {
		heapp.push_back(val);
		sz += 1;
		int i = sz;
		while((i/2)>0) {
			if(heapp[i]>heapp[i/2]) {
				swap(heapp[i],heapp[i/2]);
			}
			i /= 2;
		}
	}
	int top() {
		return heapp[sz==0?0:1];
	}
	void top_pop() {
		if(sz==0) return;
		int i = sz;
		int temp1 = heapp[i], temp2;
		while((i/2)>0) {
			temp2 = heapp[i/2];
			heapp[i/2] = temp1;
			temp1 = temp2;
			i /= 2;
		}
		heapp.pop_back();
		sz -= 1;
		if(sz>=2 and heapp[1]<heapp[2]) {
			swap(heapp[1],heapp[2]);
		}
		if(sz>=3 and heapp[1]<heapp[3]) {
			swap(heapp[1],heapp[3]);
		}
	}
	int size() {
		return sz;
	}
};

vector<int> heapsortDESC(vector<int> &v, int n) {
	vector<int> res = {0};
	mraxHeap mxH;
	for(int i=1;i<=n;i++) {
		mxH.insert(v[i]);
	}
	while(mxH.size()>0) {
		res.push_back(mxH.top());
		mxH.top_pop();
	}
	return res;
}